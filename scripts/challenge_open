#!/usr/bin/python
# -*- coding: utf-8 -*-

import time
import re

from ForceDrive import ForceDrive
import rospy
import math
import sys
import rospy; import actionlib; from control_msgs.msg import FollowJointTrajectoryGoal, FollowJointTrajectoryAction; from actionlib import SimpleActionClient, GoalStatus; from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint
from std_msgs.msg import String, Bool
from dynamic_reconfigure.server import Server
import inspect
from tue_hsr.cfg import ArmConfig
from hsrb_interface import Robot
robot = Robot()
gripper = robot.get('gripper')

rospy.loginfo("Challenge open started ...")

fd = ForceDrive()
angle = math.pi / 2
angular_velocity = rospy.get_param('~angular_velocity', 0.5)

ac = actionlib.SimpleActionClient('/hsrb/arm_trajectory_controller/follow_joint_trajectory', FollowJointTrajectoryAction)
rospy.loginfo("Waiting for actionserver ...")
ac.wait_for_server()

joint_names = ['arm_flex_joint', 'arm_lift_joint', 'arm_roll_joint', 'wrist_flex_joint', 'wrist_roll_joint']
duration = rospy.get_param('~duration', 4)

BASE_ANGLE = 0

rospy.loginfo("Starting open challenge")

def send_joint_goals(positions, base_angle=0, duration=duration):
    global BASE_ANGLE

    print "Current base_angle", BASE_ANGLE

    angle = base_angle - BASE_ANGLE

    print "Relative angle:", angle

    if angle != 0:
        fd.drive(0, 0, (angle / abs(angle)) * angular_velocity, abs(angle / angular_velocity))
        BASE_ANGLE = base_angle

    joint_traj = JointTrajectory(joint_names=joint_names, points=[JointTrajectoryPoint(positions=positions, time_from_start=rospy.Duration(duration))])
    rospy.loginfo("Sending Joint trajectory")
    rospy.loginfo(joint_traj)
    ac.send_goal_and_wait(FollowJointTrajectoryGoal(trajectory=joint_traj, goal_time_tolerance=rospy.Duration(duration)))

def neutral():
    send_joint_goals([-0.00010263716905622999, 0.274090675429228, -1.6167963425850473e-06, -1.5699983769215975, 0.00010423015252269963], 0, .1)

def pre_grasp():
    # Init
    gripper.command(1.2)
    send_joint_goals([-0.9622926371690561, 0.17419993036029925, 0.8250026167963427, -1.8909963769215974, -1.154806230152523], 0, .1)

def grasp_beer():
    # @ Beer
    send_joint_goals([-0.9622926371690561, 0.12419993036029925, 0.8250026167963427, -1.8909963769215974, -1.154806230152523], 0, 1)
    gripper.grasp(-0.5)

    # retract
    send_joint_goals([-0.9622926371690561, 0.47419993036029925, 0.8250026167963427, -1.8909963769215974, -1.154806230152523], 0, 1)

def place():
    # Place in basket
    send_joint_goals([-0.9622926371690561, 0.42419993036029925, 0.8250026167963427, -1.8909963769215974, -1.154806230152523], - math.pi - math.pi / 6, 2)
    gripper.command(1.2)

def cycle(num):
    for _ in range(0, num):
        pre_grasp()
        
        grasp_beer()
    
        place()
    
    neutral()

def trigger(msg):
    cmd = msg.data 

    s = re.search("(\w+)\(\w*\)", cmd)
    if s:
        func = s.group(1)
        rospy.loginfo("Received trigger: %s", cmd)
        g = globals()
        functions = [k for k,v in g.iteritems() if inspect.isfunction(v)] 
        if func in functions:
            try:
                eval("%s()" % cmd)
                rospy.loginfo("Executing function %s", cmd)
            except:
                rospy.logerr("Failed to execute %s", cmd)
        else:
            rospy.logerr("Received non-existing function")
    else:
        rospy.logerr("Invalid function call")

def reconfigure_callback(config, level):
    positions = []
    for joint_name in joint_names:
        positions.append(config[joint_name])
        
    send_joint_goals(positions)

    return config

EXIT = False
def emergency(msg):
    global EXIT
    if msg.data:
        EXIT = True 

srv = Server(ArmConfig, reconfigure_callback)
sub = rospy.Subscriber("/hsrb/trigger", String, trigger)
sub_em = rospy.Subscriber("/hsrb/runstop_button", Bool, emergency)
rospy.loginfo("Connected :) ...")

rospy.loginfo("Initialized")

neutral()
pre_grasp()
time.sleep(5.0)
neutral()

rospy.loginfo("Now we are waiting for the trigger ...")



while not rospy.is_shutdown():
    rospy.sleep(0.5)
    if EXIT:
        rospy.logerr("Killing the node (emergency pressed)")
        sys.exit(1)
